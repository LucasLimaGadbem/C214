import { PathFilter } from '../types';
/**
 * Checks if a given path matches any of the provided patterns
 * Supports wildcard patterns:
 * - '.fieldName' matches any property named 'fieldName' at any level
 * - 'parent.*.child' matches any path like 'parent.something.child'
 * - 'parent[*].child' matches any array index like 'parent[0].child'
 *
 * @param path - The property path to check
 * @param patterns - Array of patterns to match against
 * @returns Whether the path matches any of the patterns
 */
export declare const matchesPathPattern: (path: string, patterns: string[]) => boolean;
/**
 * Determine if a path or any of its parent paths should be filtered out
 * This helps handle structured data like arrays where we might want to filter
 * at the parent level
 *
 * @param path - The property path to check
 * @param pathFilter - Path filter configuration
 * @returns Whether the path should be filtered
 */
export declare const shouldFilterPath: (path: string, pathFilter?: PathFilter) => boolean;
/**
 * Determines if a path should be compared based on the pathFilter configuration
 *
 * @param path - The property path to check
 * @param pathFilter - Path filter configuration
 * @returns Whether the path should be compared
 */
export declare const shouldComparePath: (path: string, pathFilter?: PathFilter) => boolean;

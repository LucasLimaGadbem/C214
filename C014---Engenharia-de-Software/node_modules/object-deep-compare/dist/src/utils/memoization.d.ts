import { ComparisonOptions } from '../types';
/**
 * Creates a memoized version of a function
 * @param fn - Function to memoize
 * @param keyFn - Optional custom function to generate cache keys
 * @returns Memoized version of the function
 */
export declare const Memoize: <T extends (...args: any[]) => any>(fn: T, keyFn?: (...args: Parameters<T>) => string) => T;
/**
 * Generate a cache key for CompareProperties
 */
export declare const comparePropertiesKeyFn: <T extends Record<string, any>, U extends Record<string, any>>(firstObject: T, secondObject: U) => string;
/**
 * Generate a cache key for CompareValuesWithConflicts
 */
export declare const compareValuesWithConflictsKeyFn: <T extends Record<string, any>, U extends Record<string, any>>(firstObject: T, secondObject: U, pathOfConflict?: string, options?: ComparisonOptions) => string;
/**
 * Generate a cache key for CompareValuesWithDetailedDifferences
 */
export declare const compareValuesWithDetailedDifferencesKeyFn: <T extends Record<string, any>, U extends Record<string, any>>(firstObject: T, secondObject: U, pathOfConflict?: string, options?: ComparisonOptions) => string;
